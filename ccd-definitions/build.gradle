buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath group: 'cz.habarta.typescript-generator', name: 'typescript-generator-gradle-plugin', version: '2.29.814'
    }
}

plugins {
    id 'java'
    id 'hmcts.ccd.sdk' version '0.15.0'
}

apply plugin: 'cz.habarta.typescript-generator'

group 'uk.gov.hmcts.reform'
version '0.0.1'

repositories {
    mavenLocal()
    mavenCentral()
}

ccd {
    configDir = file('definitions')
}

def versions = [
        jacksonDatabind: '2.12.0',
        lombok         : '1.18.18',
        hamcrest       : '2.2',
        mockito        : '3.8.0'
]

dependencies {

    compileOnly group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jacksonDatabind
    compileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    annotationProcessor("org.projectlombok:lombok:${versions.lombok}")

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: versions.hamcrest
    testImplementation group: 'org.mockito', name: 'mockito-core', version: versions.mockito
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: versions.mockito
    testCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    testAnnotationProcessor("org.projectlombok:lombok:${versions.lombok}")
}

tasks.withType(Test) {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }
}

test {
    failFast = true
}

generateTypeScript {
    jsonLibrary = 'jackson2'
    classPatterns = [
        'uk.gov.hmcts.reform.divorce.ccd.model.*',
        'uk.gov.hmcts.ccd.sdk.type.*',
    ]
    outputFile = 'build/ts/index.d.ts'
    outputKind = 'module'
    mapEnum = 'asEnum'
}

def importCcdDefinition = tasks.register('importCcdDefinition') {
    doLast {
        group = 'ccd tasks'
        exec {
            file('../../.env').readLines().each() {
                def (key, value) = it.tokenize('=')
                environment key, value
            }
            commandLine '../bin/process-and-import-ccd-definition.sh'
        }
    }
}

importCcdDefinition.configure {
    dependsOn generateCCDConfig
}
