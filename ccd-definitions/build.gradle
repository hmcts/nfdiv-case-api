buildscript {
  repositories {
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath group: 'cz.habarta.typescript-generator', name: 'typescript-generator-gradle-plugin', version: '2.30.840'
  }
}

plugins {
  id 'checkstyle'
  id 'jacoco'
  id 'java'
  id 'hmcts.ccd.sdk' version '0.17.3'
  id 'pmd'
}

apply plugin: 'cz.habarta.typescript-generator'

group 'uk.gov.hmcts.reform'
version '0.0.1'

repositories {
  mavenLocal()
  mavenCentral()
}

ccd {
  configDir = file('definitions')
}

def versions = [
  jacksonDatabind: '2.12.0',
  lombok         : '1.18.20',
  hamcrest       : '2.2',
  mockito        : '3.8.0'
]

dependencies {

  compileOnly group: 'org.reflections', name: 'reflections', version: '0.9.12'
  compileOnly group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jacksonDatabind
  compileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  compileOnly group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: versions.jacksonDatabind
  annotationProcessor("org.projectlombok:lombok:${versions.lombok}")

  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation group: 'org.hamcrest', name: 'hamcrest', version: versions.hamcrest
  testImplementation group: 'org.mockito', name: 'mockito-core', version: versions.mockito
  testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: versions.mockito
  testCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  testAnnotationProcessor("org.projectlombok:lombok:${versions.lombok}")
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

generateTypeScript {
  jsonLibrary = 'jackson2'
  classPatterns = [
    'uk.gov.hmcts.reform.divorce.ccd.model.*',
    'uk.gov.hmcts.ccd.sdk.type.*',
  ]
  outputFile = 'build/ts/index.ts'
  outputKind = 'module'
  outputFileType = 'implementationFile'
  mapEnum = 'asEnum'
  group = 'ccd tasks'

  doLast {
    exec {
      commandLine 'yarn', 'prepublishOnly'
    }
  }
}

tasks.register('publishTypeScriptLocal', {
  dependsOn generateTypeScript
  group = 'ccd tasks'
  doLast {
    exec {
      commandLine 'yarn', 'link'
    }
  }
})

def importCcdDefinition = tasks.register('importCcdDefinition') {
  group = 'ccd tasks'
  doLast {
    exec {
      file('../../.env').readLines().each() {
        def (key, value) = it.tokenize('=')
        environment key, value
      }
      commandLine '../bin/process-and-import-ccd-definition.sh'
    }
  }
}

importCcdDefinition.configure {
  dependsOn generateCCDConfig
}

checkstyle {
  maxWarnings = 0
  toolVersion = '8.29'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.18.0"
  sourceSets = [sourceSets.main]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("${rootDir}/config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}
