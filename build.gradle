buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url "https://jitpack.io"
      content {
        excludeGroup "com.github.ben-manes.versions"
      }
    }

  }
  dependencies {
    classpath group: 'cz.habarta.typescript-generator', name: 'typescript-generator-gradle-plugin', version: '2.35.1025'
  }
}

plugins {
  id 'application'
  id 'checkstyle'
  id 'idea'
  id 'pmd'
  id 'jacoco'
  id 'org.owasp.dependencycheck' version '6.5.3'
  id 'org.sonarqube' version '3.3'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'org.springframework.boot' version '2.6.3'
  id 'com.github.ben-manes.versions' version '0.41.0'
  id 'hmcts.ccd.sdk' version '0.25.16'
}

apply plugin: 'cz.habarta.typescript-generator'
apply plugin: 'com.github.ben-manes.versions'

group = 'uk.gov.hmcts'
version = '0.0.1'

ccd {
  configDir = file('ccd-definitions/definitions')
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
  }
  cftlib {
    compileClasspath += sourceSets.main.output
    runtimeClasspath += sourceSets.main.output
  }
}


java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

idea {
  module {
    testSourceDirs += file('src/integrationTest/java')
    testSourceDirs += file('src/functionalTest/java')
  }
}

ext['elasticsearch.version'] = '7.16.3'

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntime.extendsFrom testRuntime
  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntime.extendsFrom testRuntime
  cftlibImplementation.extendsFrom implementation
  cftlibRuntimeOnly.extendsFrom runtimeOnly
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
  useJUnitPlatform()
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task buildCCDXlsx(type: Exec, dependsOn: generateCCDConfig) {
  group 'ccd tasks'
  commandLine './bin/ccd-build-definition.sh'
  inputs.dir layout.buildDirectory.dir('definitions')
  outputs.dir layout.buildDirectory.dir('ccd-config')
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  setTestClassesDirs(sourceSets.functionalTest.output.classesDirs)
  setClasspath(sourceSets.functionalTest.runtimeClasspath)
  include "uk/gov/hmcts/divorce/smoke/**"
}

task highLevelDataSetup(type: JavaExec) {
  mainClass.set("uk.gov.hmcts.divorce.common.ccd.HighLevelDataSetupApp")
  classpath += sourceSets.main.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

checkstyle {
  maxWarnings = 0
  toolVersion = '9.2.1'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.18.0"
  sourceSets = [sourceSets.main]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("${rootDir}/config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.getRequired().set(true)
    csv.getRequired().set(false)
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'
  outputDirectory = 'build/reports/'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

def sonarExclusions = [
  '**/uk/gov/hmcts/divorce/common/ccd/**',
  '**/uk/gov/hmcts/divorce/common/event/CreateTestCase.java',
  '**/uk/gov/hmcts/divorce/CaseApiApplication.java',
  '**/uk/gov/hmcts/divorce/common/config/**'
]

sonarqube {
  properties {
    property "sonar.projectName", "Divorce :: nfdiv-case-api"
    property "sonar.projectKey", "uk.gov.hmcts.reform:nfdiv-case-api"
    property "sonar.coverage.jacoco.xmlReportPaths", "${projectDir}/build/reports/jacoco/test/jacocoTestReport.xml"
    property "sonar.exclusions", sonarExclusions.join(', ')
  }
}


// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

dependencyManagement {
  dependencies {
    dependency group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.70'
    // CVE-2018-10237 - Unbounded memory allocation
    dependencySet(group: 'com.google.guava', version: '31.0.1-jre') {
      entry 'guava'
    }
  }
  // TODO - fix in the CFT lib by publishing platform information.
  imports {
    mavenBom 'com.fasterxml.jackson:jackson-bom:2.13.1'
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io' }
  jcenter()
}

def versions = [
  jackson           : '2.13.1',
  junit             : '5.8.2',
  junitPlatform     : '1.8.2',
  lombok            : '1.18.22',
  springBoot        : springBoot.class.package.implementationVersion
]

ext["rest-assured.version"] = '4.4.0'

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
    "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
    "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
  ]
]

dependencies {
// uncomment for local version
//implementation group: 'com.github.hmcts', name: 'ccd-config-generator', version: 'DEV-SNAPSHOT'

  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jackson
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: versions.jackson
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: versions.jackson
  implementation group: 'com.github.hmcts', name: 'befta-fw', version: '8.7.1'
  implementation group: 'com.github.hmcts', name: 'ccd-client', version: '4.8.5'
  implementation group: 'com.github.hmcts', name: 'idam-java-client', version: '2.0.1'
  implementation group: 'com.github.hmcts', name: 'java-logging', version: '5.1.9'
  implementation group: 'com.github.hmcts', name: 'send-letter-client', version: '3.0.10'
  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '4.0.3'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.17.1'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: '2.17.1'
  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '9.0.58'
  implementation group: 'org.elasticsearch', name: 'elasticsearch'
  implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.6.6'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: versions.springBoot
  implementation group: 'org.springframework.retry', name: 'spring-retry', version: '1.3.1'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.2.10.RELEASE'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bootstrap', version: '3.1.0'
  implementation group: 'uk.gov.service.notify', name: 'notifications-java-client', version: '3.17.2-RELEASE'

  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  testImplementation libraries.junit5
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

  testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test') {
    exclude(module: 'commons-logging')
    exclude(module: 'android-json')
  }

  testImplementation group: 'com.jayway.awaitility', name: 'awaitility', version: '1.7.0'
  testImplementation group: 'com.github.stefanbirkner', name: 'system-lambda', version: '1.2.1'
  testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.22.0'
  testImplementation group: 'org.assertj', name: 'assertj-guava', version: '3.4.0'
  testImplementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-contract-stub-runner', version: '3.1.0'
  testImplementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  testImplementation group: 'org.mockito', name: 'mockito-inline', version: '4.3.1'
  testImplementation group: 'io.github.openfeign', name: 'feign-jackson', version: '11.8'
  testImplementation group: 'io.rest-assured', name: 'rest-assured'
  testImplementation group: 'org.simplify4u', name: 'slf4j-mock', version: '2.1.1'

  testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation group: 'com.github.hmcts', name: 'document-management-client', version: '7.0.1'
  functionalTestImplementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '4.0.2'

  cftlibImplementation 'com.github.hmcts:rse-cft-lib:0.10.2'
}

mainClassName = 'uk.gov.hmcts.divorce.CaseApiApplication'

task loadEnvSecrets() {
  doLast {
    if (!project.file('./.aat-env').exists()) {
      new ByteArrayOutputStream().withStream { os ->
        exec {
          commandLine 'az', 'keyvault', 'secret', 'show', '--vault-name', 'nfdiv-aat', '-o', 'tsv', '--query', 'value', '--name', 'nfdiv-case-api-dot-env'
          standardOutput = os
        }
        project.file('./.aat-env').write(new String(os.toString().replace('\n', '').decodeBase64(), java.nio.charset.StandardCharsets.UTF_8))
      }
    }
  }
}

task reloadEnvSecrets(group: 'ccd tasks', dependsOn: [loadEnvSecrets]) {
  doFirst {
    if (project.file('./.aat-env').exists()) {
      project.file('./.aat-env').delete()
    }
  }
}

bootRun {
  doFirst() {
    if (project.file('./.aat-env').exists()) {
      project.file('./.aat-env').readLines().each() {
        def index = it.indexOf("=")
        def key = it.substring(0, index)
        def value = it.substring(index + 1)
        environment key, value
      }
    }
  }
}

bootJar {
  getArchiveFileName().set(provider {
    'nfdiv-case-api.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

functional {
  doFirst() {
    if (project.file('./.aat-env').exists()) {
      project.file('./.aat-env').readLines().each() {
        def index = it.indexOf("=")
        def key = it.substring(0, index)
        def value = it.substring(index + 1)
        environment key, value
      }
    }
  }
}

generateTypeScript {
  jsonLibrary = 'jackson2'
  classPatterns = [
    'uk.gov.hmcts.divorce.**.model.*',
    'uk.gov.hmcts.ccd.sdk.type.*',
  ]
  outputFile = 'build/ts/index.ts'
  outputKind = 'module'
  outputFileType = 'implementationFile'
  mapEnum = 'asEnum'
  mapDate = 'asString'
  group = 'ccd tasks'

  doLast {
    exec {
      commandLine 'yarn', 'prepublishOnly'
    }
  }
}

ccd {
  configDir = file('build/definitions')
}

task bootWithCcd(type: org.springframework.boot.gradle.tasks.run.BootRun, dependsOn: [loadEnvSecrets, buildCCDXlsx], group: 'ccd tasks') {
    classpath sourceSets.cftlib.runtimeClasspath
    mainClass = 'uk.gov.hmcts.divorce.cftlib.RunWithCFT'
    doFirst() {
      // Required by Access Management for Java 17.
      // https://github.com/x-stream/xstream/issues/101
      ['java.lang', 'java.util', 'java.lang.reflect', 'java.text', 'java.awt.font'].each {
        jvmArgs('--add-opens', "java.base/${it}=ALL-UNNAMED")
      }
      jvmArgs('--add-opens', 'java.desktop/java.awt.font=ALL-UNNAMED')
      jvmArgs('-XX:ReservedCodeCacheSize=64m')

      project.file('./.aat-env').readLines().each() {
        def index = it.indexOf("=")
        def key = it.substring(0, index)
        def value = it.substring(index + 1)
        environment key, value
      }
    }
}

