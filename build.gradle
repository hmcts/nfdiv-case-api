
buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath group: 'cz.habarta.typescript-generator', name: 'typescript-generator-gradle-plugin', version: '2.32.889'
  }
}

plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'org.owasp.dependencycheck' version '6.2.2'
  id 'org.sonarqube' version '3.3'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'org.springframework.boot' version '2.5.1'
  id 'com.github.ben-manes.versions' version '0.39.0'
  id 'hmcts.ccd.sdk' version '0.20.19'
}

apply plugin: 'cz.habarta.typescript-generator'

group = 'uk.gov.hmcts'
version = '0.0.1'

ccd {
  configDir = file('ccd-definitions/definitions')
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntime.extendsFrom testRuntime
  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntime.extendsFrom testRuntime
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
  useJUnitPlatform()
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

checkstyle {
  maxWarnings = 0
  toolVersion = '8.29'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.18.0"
  sourceSets = [sourceSets.main]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("${rootDir}/config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'
  outputDirectory = 'build/reports/'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

def sonarExclusions = [
  '**/uk/gov/hmcts/divorce/ccd/**',
  '**/uk/gov/hmcts/divorce/common/model/**',
  '**/uk/gov/hmcts/divorce/common/config/**',
  '**/uk/gov/hmcts/divorce/document/model/**',
  '**/uk/gov/hmcts/divorce/payment/model/**'
]

sonarqube {
  properties {
    property "sonar.projectName", "Divorce :: nfdiv-case-api"
    property "sonar.projectKey", "uk.gov.hmcts.reform:nfdiv-case-api"
    property "sonar.coverage.jacoco.xmlReportPaths", "${projectDir}/build/reports/jacoco/test/jacocoTestReport.xml"
    property "sonar.exclusions", sonarExclusions.join(', ')
  }
}


// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}


dependencyManagement {
  dependencies {
    dependency group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.69'
    // CVE-2018-10237 - Unbounded memory allocation
    dependencySet(group: 'com.google.guava', version: '30.1.1-jre') {
      entry 'guava'
    }
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

def versions = [
  assertJ           : '3.19.0',
  ccdStoreClient    : '4.7.6',
  idamClient        : '2.0.0',
  jackson           : '2.12.3',
  junit             : '5.7.2',
  junitPlatform     : '1.7.2',
  lombok            : '1.18.12',
  reformsJavaLogging: '5.1.7',
  springBoot        : springBoot.class.package.implementationVersion,
  springfoxSwagger  : '3.0.0',
  s2sClient         : '4.0.0',
  slClient          : '3.0.4'
]

ext["rest-assured.version"] = '4.3.0'

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
    "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
    "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
  ]
]

// force junit5 deps to use groovy v3 which fixes reflective call errors for java 11
// rest assured 4.2 -> 4.3 jumps to groovy v3. junit v5.6 still on v2.5
dependencyManagement {
  dependencies {
    dependencySet(group: 'org.codehaus.groovy', version: '3.0.8') {
      entry 'groovy'
      entry 'groovy-json'
      entry 'groovy-xml'
    }
  }
}

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: versions.springBoot

  implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger

  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.2.8.RELEASE'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bootstrap', version: '3.0.3'

  implementation group: 'uk.gov.service.notify', name: 'notifications-java-client', version: '3.17.2-RELEASE'

  implementation group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformsJavaLogging
  implementation group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformsJavaLogging
  implementation group: 'uk.gov.hmcts.reform', name: 'logging-spring', version: versions.reformsJavaLogging

  implementation group: 'uk.gov.hmcts.reform', name: 'idam-client', version: versions.idamClient
  implementation (group: 'uk.gov.hmcts.reform', name: 'core-case-data-store-client', version: versions.ccdStoreClient)

  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jackson
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: versions.jackson
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: versions.jackson

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.14.1'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: '2.14.1'

  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '9.0.43'
  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: '9.0.43'

  implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  implementation group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: versions.s2sClient

  implementation group: 'com.github.hmcts', name: 'send-letter-client', version: versions.slClient

  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  testImplementation libraries.junit5
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

  testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test') {
    exclude(module: 'commons-logging')
    exclude(module: 'android-json')
  }

  testImplementation group: 'io.rest-assured', name: 'rest-assured'

  testImplementation group: 'org.assertj', name: 'assertj-core', version: versions.assertJ
  testImplementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-contract-stub-runner', version: '3.0.3'

  testImplementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath

  smokeTestImplementation sourceSets.main.runtimeClasspath
}

mainClassName = 'uk.gov.hmcts.divorce.CaseApiApplication'

ext.getVaultSecret = { String secretName ->
  new ByteArrayOutputStream().withStream { os ->
    exec {
      commandLine 'az', 'keyvault', 'secret', 'show', '--vault-name', 'nfdiv-aat', '-o', 'tsv', '--query', 'value', '--name', secretName
      standardOutput = os
    }
    return os.toString().replace('\n', '')
  }
}

bootRun {
  doFirst() {
    if (System.getenv("IDAM_API_BASEURL") == null) {
      println("Loading secrets from vault")

      systemProperty 'IDAM_API_BASEURL', 'https://idam-api.aat.platform.hmcts.net'

      systemProperty 'UK_GOV_NOTIFY_API_KEY', getVaultSecret('uk-gov-notify-api-key')
      systemProperty 'S2S_SECRET', getVaultSecret('s2s-case-api-secret')
      systemProperty 'IDAM_CASEWORKER_USERNAME', getVaultSecret('idam-caseworker-username')
      systemProperty 'IDAM_CASEWORKER_PASSWORD', getVaultSecret('idam-caseworker-password')
      systemProperty 'IDAM_SOLICITOR_USERNAME', getVaultSecret('idam-solicitor-username')
      systemProperty 'IDAM_SOLICITOR_PASSWORD', getVaultSecret('idam-solicitor-password')
      systemProperty 'IDAM_CLIENT_SECRET', getVaultSecret('idam-secret')
    }
  }
}

bootJar {
  getArchiveFileName().set(provider {
    'nfdiv-case-api.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

functional {
  doFirst() {
    if (System.getenv("OAUTH2_CLIENT_SECRET") == null) {
      println("Loading secrets from vault")

      systemProperty 'IDAM_API_BASEURL', 'https://idam-api.aat.platform.hmcts.net'

      systemProperty 'UK_GOV_NOTIFY_API_KEY', getVaultSecret('uk-gov-notify-api-key')
      systemProperty 'S2S_SECRET', getVaultSecret('s2s-case-api-secret')
      systemProperty 'IDAM_CASEWORKER_USERNAME', getVaultSecret('idam-caseworker-username')
      systemProperty 'IDAM_CASEWORKER_PASSWORD', getVaultSecret('idam-caseworker-password')
      systemProperty 'IDAM_SOLICITOR_USERNAME', getVaultSecret('idam-solicitor-username')
      systemProperty 'IDAM_SOLICITOR_PASSWORD', getVaultSecret('idam-solicitor-password')
      systemProperty 'OAUTH2_CLIENT_SECRET', getVaultSecret('idam-secret')
    }
  }
}

generateTypeScript {
  jsonLibrary = 'jackson2'
  classPatterns = [
    'uk.gov.hmcts.divorce.**.model.*',
    'uk.gov.hmcts.ccd.sdk.type.*',
  ]
  outputFile = 'build/ts/index.ts'
  outputKind = 'module'
  outputFileType = 'implementationFile'
  mapEnum = 'asEnum'
  mapDate = 'asString'
  group = 'ccd tasks'

  doLast {
    exec {
      commandLine 'yarn', 'prepublishOnly'
    }
  }
}

ccd {
  configDir = file('build/definitions')
}

tasks.register('stopCaseApiContainer') {
  group = 'ccd tasks'

  doFirst {
    exec {
      executable "sh"
      args "-c", "docker stop nfdiv-case-api || exit 0"
    }
  }
}

def reloadCcd = tasks.register('reloadCcd') {
  group = 'ccd tasks'
  doLast {
    exec {
      file('../.env').readLines().each() {
        def (key, value) = it.tokenize('=')
        environment key, value
      }
      commandLine './bin/process-and-import-ccd-definition.sh'
    }
    exec {
      file('../.env').readLines().each() {
        def (key, value) = it.tokenize('=')
        environment key, value
      }
      commandLine 'docker-compose', '-f', '../docker-compose.yml', 'up', '-d', 'nfdiv-case-api'
    }
  }
}

reloadCcd.configure {
  dependsOn assemble, generateCCDConfig
}

generateCCDConfig.dependsOn stopCaseApiContainer
